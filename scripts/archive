#!/usr/bin/env python3

from redis import StrictRedis
from urllib.parse import unquote
import sqlite3

conn = sqlite3.connect("database.sqlite3")
# conn = sqlite3.connect(":memory:")

conn.execute(
    """
CREATE TABLE IF NOT EXISTS record (
    user TEXT,
    site TEXT,
    date TEXT,
    dimension TEXT,
    type TEXT,
    count integer,
    unique(user, site, date, dimension, type)
)"""
)



conn.execute("CREATE INDEX IF NOT EXISTS idx_record_user_iste ON record (user, site)")
conn.execute("CREATE INDEX IF NOT EXISTS idx_record_date ON record (date)")


# This pragmas can corrupt the databse. This needs to be compensated on the
# operational level by regular backups.
conn.execute("PRAGMA journal_mode = OFF;")
conn.execute("PRAGMA synchronous = 0;")
conn.execute("PRAGMA cache_size = 1000000;")
conn.execute("PRAGMA locking_mode = EXCLUSIVE;")
conn.execute("PRAGMA temp_store = MEMORY;")
#conn.isolation_level = None

r = StrictRedis()

ZET_TYPE = ["lang", "ref", "loc", "origin"]


def write(*, user, site, dimension, date, type, count):
    # print(user, site, dimension, date, type, count)
    conn.execute(
        """INSERT OR REPLACE INTO record (user, site, date, dimension, type, count)
           VALUES(?, ?, ?, ?, ?, ?)""",
        [user, site, dimension, date, type, count],
    )


def process_keys(keys):
    pipe = r.pipeline()
    parts_list = []
    for key in keys:
        parts = [unquote(i) for i in key[2:].decode().split(",")]
        parts_list.append(parts)
        _, _, field, _ = parts
        if field in ZET_TYPE:
            pipe.zrange(key, 0, -1, withscores=True)
        else:
            pipe.hgetall(key)

    results = pipe.execute()
    batch = []
    for parts, result in zip(parts_list, results):
        origin, user_id, field, time_range = parts
        for key, value in dict(result).items():
            value = int(value)
            batch.append((user_id, origin, field, time_range, key, value))
        conn.executemany(
            """INSERT OR REPLACE INTO record (user, site, date, dimension, type, count)
               VALUES(?, ?, ?, ?, ?, ?)""",
            batch,
        )
        conn.commit()


cursor = 0
while True:
    cursor, results = r.scan(cursor, match="v:*,*,*,*-*-*", count=100)
    process_keys(results)
    if not cursor:
        break
